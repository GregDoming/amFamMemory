{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Desktop/greggit/amfam/src/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./Countdown.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countdown = props => {\n  _s();\n\n  const {\n    decreaseTime,\n    timer\n  } = props;\n  let intervalRef = useRef();\n  useEffect(() => {\n    if (timer >= 1) {\n      intervalRef.current = setInterval(decreaseTime, 1000);\n      return () => clearInterval(intervalRef.current);\n    } else {\n      clearInterval(0);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Time Left: \", timer]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Countdown, \"AcQ1i4tD0owQ+S+iAErNNAWnC24=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/home/gregory/Desktop/greggit/amfam/src/Countdown.js"],"names":["React","useRef","useEffect","useState","Countdown","props","decreaseTime","timer","intervalRef","current","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA0BF,KAAhC;AAEA,MAAIG,WAAW,GAAGP,MAAM,EAAxB;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,KAAK,IAAI,CAAb,EAAgB;AACdC,MAAAA,WAAW,CAACC,OAAZ,GAAsBC,WAAW,CAACJ,YAAD,EAAe,IAAf,CAAjC;AACA,aAAO,MAAMK,aAAa,CAACH,WAAW,CAACC,OAAb,CAA1B;AACD,KAHD,MAGO;AACLE,MAAAA,aAAa,CAAC,CAAD,CAAb;AACD;AACF,GAPQ,EAON,EAPM,CAAT;AASA,sBACI;AAAA,8BAAeJ,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGD,CAlBD;;GAAMH,S;;KAAAA,S;AAoBN,eAAeA,SAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport \"./Countdown.css\";\n\nconst Countdown = (props) => {\n  const { decreaseTime, timer } = props;\n\n  let intervalRef = useRef();\n\n\n  useEffect(() => {\n    if (timer >= 1) {\n      intervalRef.current = setInterval(decreaseTime, 1000);\n      return () => clearInterval(intervalRef.current);\n    } else {\n      clearInterval(0)\n    }\n  }, []);\n  \n  return (\n      <p>Time Left: {timer}</p>\n  );\n};\n\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}
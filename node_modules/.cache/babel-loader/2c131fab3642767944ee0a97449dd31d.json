{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const emojiList = [\"ğŸ˜€\", \"ğŸ˜‚\", \"ğŸ¥°\", \"ğŸ˜˜\", \"ğŸ¤ª\", \"ğŸ¤“\", \"ğŸ¤©\", \"ğŸ¥³\", \"ğŸ˜€\", \"ğŸ˜‚\", \"ğŸ¥°\", \"ğŸ˜˜\", \"ğŸ¤ª\", \"ğŸ¤“\", \"ğŸ¤©\", \"ğŸ¥³\"];\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useImmer({\n    column: -1,\n    row: -1,\n    emoji: \"\"\n  });\n  const [secondEmoji, setSecondEmoji] = useImmer({\n    column: -1,\n    row: -1,\n    emoji: \"\"\n  });\n  const [cardMap, setCardMap] = useImmer([]); // 0 = no Cards currently clicked, 1 = 1 Card currently clicked, 2 = 2 Cards currently clicked (cannot go higher than 2)\n\n  const [currentMove, setCurrentMove] = useState(0);\n\n  const compareCardEmoji = (emojiOne, emojiTwo) => {\n    if (emojiOne === emojiTwo) {\n      setCardMap(draft => {\n        draft[firstEmoji.column][firstEmoji.row].matched = true;\n      });\n    }\n  };\n\n  const makeBoard = () => {\n    const shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n\n      return array;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    const tempArray = [[{}, {}, {}, {}], [{}, {}, {}, {}], [{}, {}, {}, {}], [{}, {}, {}, {}]];\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        tempArray[i][j].emoji = randomnArray[tracker];\n        tempArray[i][j].flipped = false;\n        tempArray[i][j].matched = false;\n        tracker++;\n      }\n\n      setCardMap(tempArray);\n    }\n  };\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n\n  const newGameClick = event => {\n    event.preventDefault();\n    makeBoard();\n  };\n\n  const handleCardClick = (row, column) => {\n    switch (currentMove) {\n      case 0:\n        {\n          setCardMap(draft => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setFirstEmoji(draft => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCurrentMove(1);\n        }\n        break;\n\n      case 1:\n        {\n          setCardMap(draft => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setSecondEmoji(draft => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCurrentMove(0);\n        }\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"memoryContainer\",\n      children: cardMap.map((columnMap, index) => {\n        return /*#__PURE__*/_jsxDEV(CardRow, {\n          handleCardClick: handleCardClick,\n          columnMap: columnMap,\n          column: index\n        }, \"card_row\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newGameClick,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MemoryGame, \"gVjGF7rrGcjXkUdO2+g/32Q5aUY=\", false, function () {\n  return [useImmer, useImmer, useImmer];\n});\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js"],"names":["React","useState","useEffect","useImmer","CardRow","MemoryGame","emojiList","gameover","setGameover","firstEmoji","setFirstEmoji","column","row","emoji","secondEmoji","setSecondEmoji","cardMap","setCardMap","currentMove","setCurrentMove","compareCardEmoji","emojiOne","emojiTwo","draft","matched","makeBoard","shuffleArray","array","i","length","j","Math","floor","random","randomnArray","tempArray","tracker","flipped","newGameClick","event","preventDefault","handleCardClick","map","columnMap","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\n\nconst MemoryGame = () => {\n  const emojiList = [\n    \"ğŸ˜€\",\n    \"ğŸ˜‚\",\n    \"ğŸ¥°\",\n    \"ğŸ˜˜\",\n    \"ğŸ¤ª\",\n    \"ğŸ¤“\",\n    \"ğŸ¤©\",\n    \"ğŸ¥³\",\n    \"ğŸ˜€\",\n    \"ğŸ˜‚\",\n    \"ğŸ¥°\",\n    \"ğŸ˜˜\",\n    \"ğŸ¤ª\",\n    \"ğŸ¤“\",\n    \"ğŸ¤©\",\n    \"ğŸ¥³\",\n  ];\n\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useImmer({ column: -1, row: -1, emoji: \"\" });\n  const [secondEmoji, setSecondEmoji] = useImmer({ column: -1, row: -1, emoji: \"\" });\n  const [cardMap, setCardMap] = useImmer([]);\n  // 0 = no Cards currently clicked, 1 = 1 Card currently clicked, 2 = 2 Cards currently clicked (cannot go higher than 2)\n  const [currentMove, setCurrentMove] = useState(0);\n\n  const compareCardEmoji = (emojiOne, emojiTwo) => {\n    if (emojiOne === emojiTwo) {\n      setCardMap(draft => {\n        draft[firstEmoji.column][firstEmoji.row].matched = true\n      })\n    }\n  };\n\n  const makeBoard = () => {\n    const shuffleArray = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n\n    const tempArray = [\n      [{}, {}, {}, {}],\n      [{}, {}, {}, {}],\n      [{}, {}, {}, {}],\n      [{}, {}, {}, {}],\n    ];\n\n    let tracker = 0;\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        tempArray[i][j].emoji = randomnArray[tracker];\n        tempArray[i][j].flipped = false;\n        tempArray[i][j].matched = false;\n        tracker++;\n      }\n      setCardMap(tempArray);\n    }\n  };\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n\n  const newGameClick = (event) => {\n    event.preventDefault();\n    makeBoard();\n  };\n\n  const handleCardClick = (row, column) => {\n    switch (currentMove) {\n      case 0:\n        {\n          setCardMap((draft) => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setFirstEmoji((draft) => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column\n            draft.row = row\n          });\n          setCurrentMove(1);\n        }\n        break;\n\n      case 1:\n        {\n          setCardMap((draft) => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setSecondEmoji((draft) => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column\n            draft.row = row\n          });\n          setCurrentMove(0);\n        }\n        break;\n    }\n  };\n\n  return (\n    <>\n      <div class=\"memoryContainer\">\n        {cardMap.map((columnMap, index) => {\n          return (\n            <CardRow\n              handleCardClick={handleCardClick}\n              key={\"card_row\" + index}\n              columnMap={columnMap}\n              column={index}\n            />\n          );\n        })}\n      </div>\n      <button onClick={newGameClick}>New Game</button>\n    </>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}
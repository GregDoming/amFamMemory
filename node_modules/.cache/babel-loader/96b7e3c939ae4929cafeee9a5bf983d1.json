{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CardRow from \"./CardRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardState = [[{\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}], [{\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}], [{\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}], [{\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}, {\n  flipped: false,\n  matched: false,\n  emoji: \"\"\n}]];\n\nconst MemoryGame = () => {\n  _s();\n\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useState();\n  const [secondEmoji, setSecondEmoji] = useState();\n  const [boardMap, setBoardMap] = useState(initialBoardState);\n  const emojiList = [\"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\", \"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\"];\n  console.log(boardMap[0][0].emoji);\n\n  const compareCardEmoji = () => {};\n\n  const makeBoard = () => {\n    const shuffleArray = array => {\n      const clonedArray = [...array];\n\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [clonedArray[i], clonedArray[j]] = [clonedArray[j], clonedArray[i]];\n      }\n\n      return clonedArray;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        setBoardMap([i][j].emoji = randomnArray[tracker]);\n        tracker++;\n      }\n    }\n  };\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: boardMap.map((currentRow, index) => {\n      return /*#__PURE__*/_jsxDEV(CardRow, {\n        rowEmojis: currentRow\n      }, \"card_row\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MemoryGame, \"32vzW4ywJbCEFoWoKO0Oep/GrTI=\");\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js"],"names":["React","useState","useEffect","CardRow","initialBoardState","flipped","matched","emoji","MemoryGame","gameover","setGameover","firstEmoji","setFirstEmoji","secondEmoji","setSecondEmoji","boardMap","setBoardMap","emojiList","console","log","compareCardEmoji","makeBoard","shuffleArray","array","clonedArray","i","length","j","Math","floor","random","randomnArray","tracker","map","currentRow","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CardRow from \"./CardRow\";\n\nconst initialBoardState = [\n  [{\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }],\n  [{\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }],\n  [{\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }],\n  [{\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }, {\n    flipped: false,\n    matched: false,\n    emoji: \"\"\n  }],\n  \n]\n\nconst MemoryGame = () => {\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useState();\n  const [secondEmoji, setSecondEmoji] = useState();\n  const [boardMap, setBoardMap] = useState(initialBoardState);\n\n  const emojiList = [\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n  ];\n\n  console.log(boardMap[0][0].emoji)\n\n\n  const compareCardEmoji = () => {};\n\n  const makeBoard = () => {\n    const shuffleArray = (array) => {\n      const clonedArray = [...array];\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [clonedArray[i], clonedArray[j]] = [clonedArray[j], clonedArray[i]];\n      }\n      return clonedArray;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        setBoardMap(([i][j].emoji = randomnArray[tracker]));\n        tracker++;\n      }\n    }\n  };\n\n  useEffect(() => {\n    makeBoard()\n  }, [])\n\n\n  return (\n    <div>\n      {boardMap.map((currentRow, index) => {\n        return <CardRow key={\"card_row\" + index} rowEmojis={currentRow} />;\n      })}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}
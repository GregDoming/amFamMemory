{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const initialBoolState = [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]];\n  const intialEmojiState = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"]];\n  const intialState = [[{}, {}, {}, {}], [{}, {}, {}, {}], [{}, {}, {}, {}], [{}, {}, {}, {}]];\n  const emojiList = [\"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\", \"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\"];\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useState();\n  const [secondEmoji, setSecondEmoji] = useState();\n  const [emojiMap, setEmojiMap] = useState(intialEmojiState);\n  const [flippedMap, setFlippedMap] = useState(initialBoolState);\n  const [matchedMap, setMatchedMap] = useState(initialBoolState);\n  const [cardMap, setCardMap] = useState(intialState);\n\n  const compareCardEmoji = () => {};\n\n  const makeBoard = () => {\n    const shuffleArray = array => {\n      const clonedArray = [...array];\n\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [clonedArray[i], clonedArray[j]] = [clonedArray[j], clonedArray[i]];\n      }\n\n      return clonedArray;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    const tempStateArr = [...cardMap];\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        tempStateArr[i][j].emoji = randomnArray[tracker];\n        tempStateArr[i][j].flipped = false;\n        tempStateArr[i][j].matched = false;\n        tracker++;\n      }\n    }\n\n    ;\n    setCardMap(tempStateArr);\n  };\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n\n  const newGameClick = event => {\n    event.preventDefault();\n    makeBoard();\n  };\n\n  const handleCardClick = (row, column) => {\n    const tempCardMap = [...cardMap];\n    console.log(tempCardMap);\n    tempCardMap[column][row].flipped = !tempCardMap[column][row].flipped;\n    setCardMap(tempCardMap);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"memoryContainer\",\n      children: cardMap.map((columnMap, index) => {\n        return /*#__PURE__*/_jsxDEV(CardRow, {\n          handleCardClick: handleCardClick,\n          columnMap: columnMap,\n          column: index\n        }, \"card_row\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newGameClick,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MemoryGame, \"StlyDxZmTBhDJ8g8WoeE3rfE9Ic=\");\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js"],"names":["React","useState","useEffect","CardRow","MemoryGame","initialBoolState","intialEmojiState","intialState","emojiList","gameover","setGameover","firstEmoji","setFirstEmoji","secondEmoji","setSecondEmoji","emojiMap","setEmojiMap","flippedMap","setFlippedMap","matchedMap","setMatchedMap","cardMap","setCardMap","compareCardEmoji","makeBoard","shuffleArray","array","clonedArray","i","length","j","Math","floor","random","randomnArray","tempStateArr","tracker","emoji","flipped","matched","newGameClick","event","preventDefault","handleCardClick","row","column","tempCardMap","console","log","map","columnMap","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,kBAAP;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAMC,gBAAgB,GAAG,CACvB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CADuB,EAEvB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAFuB,EAGvB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAHuB,EAIvB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAJuB,CAAzB;AAOA,QAAMC,gBAAgB,GAAG,CACvB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CADuB,EAEvB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAFuB,EAGvB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAHuB,EAIvB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAJuB,CAAzB;AAOA,QAAMC,WAAW,GAAG,CAClB,CACE,EADF,EAEE,EAFF,EAGE,EAHF,EAIE,EAJF,CADkB,EAOlB,CACE,EADF,EAEE,EAFF,EAGE,EAHF,EAIE,EAJF,CAPkB,EAalB,CACE,EADF,EAEE,EAFF,EAGE,EAHF,EAIE,EAJF,CAbkB,EAmBlB,CACE,EADF,EAEE,EAFF,EAGE,EAHF,EAIE,EAJF,CAnBkB,CAApB;AA2BA,QAAMC,SAAS,GAAG,CAChB,IADgB,EAEhB,IAFgB,EAGhB,IAHgB,EAIhB,IAJgB,EAKhB,IALgB,EAMhB,IANgB,EAOhB,IAPgB,EAQhB,IARgB,EAShB,IATgB,EAUhB,IAVgB,EAWhB,IAXgB,EAYhB,IAZgB,EAahB,IAbgB,EAchB,IAdgB,EAehB,IAfgB,EAgBhB,IAhBgB,CAAlB;AAmBA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,EAA9C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAACK,gBAAD,CAAxC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAACI,gBAAD,CAA5C;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAACI,gBAAD,CAA5C;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAACM,WAAD,CAAtC;;AAEA,QAAMgB,gBAAgB,GAAG,MAAM,CAAE,CAAjC;;AAEA,QAAMC,SAAS,GAAG,MAAM;AACtB,UAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,YAAMC,WAAW,GAAG,CAAC,GAAGD,KAAJ,CAApB;;AACA,WAAK,IAAIE,CAAC,GAAGF,KAAK,CAACG,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,cAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,SAACD,WAAW,CAACC,CAAD,CAAZ,EAAiBD,WAAW,CAACG,CAAD,CAA5B,IAAmC,CAACH,WAAW,CAACG,CAAD,CAAZ,EAAiBH,WAAW,CAACC,CAAD,CAA5B,CAAnC;AACD;;AACD,aAAOD,WAAP;AACD,KAPD;;AASA,UAAMO,YAAY,GAAGT,YAAY,CAACjB,SAAD,CAAjC;AAEA,UAAM2B,YAAY,GAAG,CAAC,GAAGd,OAAJ,CAArB;AACA,QAAIe,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BK,QAAAA,YAAY,CAACP,CAAD,CAAZ,CAAgBE,CAAhB,EAAmBO,KAAnB,GAA2BH,YAAY,CAACE,OAAD,CAAvC;AACAD,QAAAA,YAAY,CAACP,CAAD,CAAZ,CAAgBE,CAAhB,EAAmBQ,OAAnB,GAA6B,KAA7B;AACAH,QAAAA,YAAY,CAACP,CAAD,CAAZ,CAAgBE,CAAhB,EAAmBS,OAAnB,GAA6B,KAA7B;AACAH,QAAAA,OAAO;AACR;AACF;;AAAA;AACDd,IAAAA,UAAU,CAACa,YAAD,CAAV;AACD,GAvBD;;AAyBAjC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMgB,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACAlB,IAAAA,SAAS;AACV,GAHD;;AAKA,QAAMmB,eAAe,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACvC,UAAMC,WAAW,GAAG,CAAC,GAAGzB,OAAJ,CAApB;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAA,IAAAA,WAAW,CAACD,MAAD,CAAX,CAAoBD,GAApB,EAAyBN,OAAzB,GAAmC,CAACQ,WAAW,CAACD,MAAD,CAAX,CAAoBD,GAApB,EAAyBN,OAA7D;AACAhB,IAAAA,UAAU,CAACwB,WAAD,CAAV;AACD,GALD;;AAOA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,iBAAX;AAAA,gBACGzB,OAAO,CAAC4B,GAAR,CAAY,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACjC,4BACE,QAAC,OAAD;AACE,UAAA,eAAe,EAAER,eADnB;AAGE,UAAA,SAAS,EAAEO,SAHb;AAIE,UAAA,MAAM,EAAEC;AAJV,WAEO,aAAaA,KAFpB;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATA;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAQ,MAAA,OAAO,EAAEX,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA,kBADF;AAiBD,CAjID;;GAAMpC,U;;KAAAA,U;AAmIN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\n\nconst MemoryGame = () => {\n  const initialBoolState = [\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n  ];\n\n  const intialEmojiState = [\n    [\"\", \"\", \"\", \"\"],\n    [\"\", \"\", \"\", \"\"],\n    [\"\", \"\", \"\", \"\"],\n    [\"\", \"\", \"\", \"\"],\n  ];\n\n  const intialState = [\n    [\n      {  },\n      {  },\n      {  },\n      {  },\n    ],\n    [\n      {  },\n      {  },\n      {  },\n      {  },\n    ],\n    [\n      {  },\n      {  },\n      {  },\n      {  },\n    ],\n    [\n      {  },\n      {  },\n      {  },\n      {  },\n    ],\n  ];\n\n  const emojiList = [\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n  ];\n\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useState();\n  const [secondEmoji, setSecondEmoji] = useState();\n  const [emojiMap, setEmojiMap] = useState(intialEmojiState);\n  const [flippedMap, setFlippedMap] = useState(initialBoolState);\n  const [matchedMap, setMatchedMap] = useState(initialBoolState);\n  const [cardMap, setCardMap] = useState(intialState)\n\n  const compareCardEmoji = () => {};\n\n  const makeBoard = () => {\n    const shuffleArray = (array) => {\n      const clonedArray = [...array];\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [clonedArray[i], clonedArray[j]] = [clonedArray[j], clonedArray[i]];\n      }\n      return clonedArray;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    \n    const tempStateArr = [...cardMap];\n    let tracker = 0;\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        tempStateArr[i][j].emoji = randomnArray[tracker];\n        tempStateArr[i][j].flipped = false\n        tempStateArr[i][j].matched = false\n        tracker++;\n      }\n    };\n    setCardMap(tempStateArr);\n  };\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n\n  const newGameClick = (event) => {\n    event.preventDefault();\n    makeBoard()\n  };\n\n  const handleCardClick = (row, column) => {\n    const tempCardMap = [...cardMap];\n    console.log(tempCardMap)\n    tempCardMap[column][row].flipped = !tempCardMap[column][row].flipped;\n    setCardMap(tempCardMap);\n  };\n\n  return (\n    <>\n      <div class=\"memoryContainer\">\n        {cardMap.map((columnMap, index) => {\n          return (\n            <CardRow\n              handleCardClick={handleCardClick}\n              key={\"card_row\" + index}\n              columnMap={columnMap}\n              column={index}\n            />\n          );\n        })}\n      </div>\n      <button onClick={newGameClick}>New Game</button>\n    </>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}
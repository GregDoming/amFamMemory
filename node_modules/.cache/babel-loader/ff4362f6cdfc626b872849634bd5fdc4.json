{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { useIsMount } from \"./hooks/useIsMount\";\nimport { unstable_batchedUpdates } from \"react-dom\";\nimport Countdown from \"./Countdown\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const emojiList = [\"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\", \"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\"];\n  const [gameover, setGameover] = useState(false);\n  const [gameoverMessage, setGameoverMessage] = useState(\"\");\n  const [comapreCards, setCompareCards] = useState(false);\n  const [matchesCount, setMatchesCount] = useState(0);\n  const [timer, setTimer] = useState(60);\n  const [score, setScore] = useImmer({\n    count: 0\n  });\n  const [firstEmoji, setFirstEmoji] = useImmer({\n    column: -1,\n    row: -1,\n    emoji: \"\"\n  });\n  const [secondEmoji, setSecondEmoji] = useImmer({\n    column: -1,\n    row: -1,\n    emoji: \"\"\n  });\n  const [cardMap, setCardMap] = useImmer([]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (isMount) {\n      return;\n    } else if (compareCards) {\n      compareCardEmoji(firstEmoji, secondEmoji);\n    }\n  }, [compareCards]);\n  useEffect(() => {\n    makeBoard();\n  }, []);\n  useEffect(() => {\n    if (matchesCount == 8) {\n      checkWin();\n    }\n  }, [matchesCount]);\n  useEffect(() => {\n    if (timer === 0) {\n      checkWin();\n    }\n  }, [timer]); // 0 = no Cards currently clicked, 1 = 1 Card currently clicked, 2 = 2 Cards currently clicked (cannot go higher than 2)\n\n  const compareCardEmoji = (emojiOne, emojiTwo) => {\n    const {\n      column: columnOne,\n      row: rowOne,\n      emoji: firstEmoji\n    } = emojiOne;\n    const {\n      column: columnTwo,\n      row: rowTwo,\n      emoji: secondEmoji\n    } = emojiTwo;\n\n    if (firstEmoji == secondEmoji) {\n      setCardMap(draft => {\n        draft[columnOne][rowOne].matched = true;\n        draft[columnTwo][rowTwo].matched = true;\n      });\n      setMatchesCount(prevMatchesCount => prevMatchesCount + 1);\n      setCurrentMove(0);\n    } else {\n      setCurrentMove(2);\n      setScore(draft => {\n        draft.count++;\n      });\n    }\n  };\n\n  const checkWin = () => {\n    if (timer <= 0) {\n      setGameoverMessage(\"You ran out of time YOU LOSE!!!\");\n      setGameover(true);\n    } else {\n      setGameoverMessage(\"You finished in time YOU WIN!!!\");\n      setGameover(true);\n    }\n  };\n\n  const decreaseTime = () => {\n    setTimer(prev => prev - 1);\n  };\n\n  const makeBoard = () => {\n    const shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n\n      return array;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    const tempArray = [];\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      const tempInnerArray = [];\n\n      for (let j = 0; j < 4; j++) {\n        const tempObj = {};\n        tempObj.emoji = randomnArray[tracker];\n        tempObj.flipped = false;\n        tempObj.matched = false;\n        tempInnerArray.push(tempObj);\n        tracker++;\n      }\n\n      setScore(draft => {\n        draft.count = 0;\n      });\n      tempArray.push(tempInnerArray);\n    }\n\n    setCardMap(tempArray);\n    setCurrentMove(0);\n    setMatchesCount(0);\n    setTimer(60);\n    setGameoverMessage(\"\");\n    setGameover(false);\n  };\n\n  const newGameClick = event => {\n    event.preventDefault();\n    makeBoard();\n  };\n\n  const handleCardClick = (row, column) => {\n    switch (currentMove) {\n      case 0:\n        {\n          setCardMap(draft => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setFirstEmoji(draft => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCurrentMove(1);\n        }\n        break;\n\n      case 1:\n        {\n          setCardMap(draft => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setSecondEmoji(draft => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCompareCards(true);\n        }\n        break;\n\n      case 2:\n        {\n          setCardMap(draft => {\n            draft[firstEmoji.column][firstEmoji.row].flipped = false;\n            draft[secondEmoji.column][secondEmoji.row].flipped = false;\n          });\n          setCurrentMove(0);\n        }\n        break;\n\n      case 3:\n        {}\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Score: \", score.count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Countdown, {\n      timer: timer,\n      decreaseTime: decreaseTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"memoryContainer\",\n      children: cardMap.map((columnMap, index) => {\n        return /*#__PURE__*/_jsxDEV(CardRow, {\n          handleCardClick: handleCardClick,\n          columnMap: columnMap,\n          column: index\n        }, \"card_row\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), gameover && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: gameoverMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Press newgame button to start a new game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), currentMove === 2 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: handleCardClick,\n      children: \"No Match! click mouse to try again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newGameClick,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MemoryGame, \"0us6CIrjanwd6htUwAnAMfLy3Ao=\", false, function () {\n  return [useImmer, useImmer, useImmer, useImmer, useIsMount];\n});\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js"],"names":["React","useState","useEffect","useRef","useImmer","useIsMount","unstable_batchedUpdates","Countdown","CardRow","MemoryGame","emojiList","gameover","setGameover","gameoverMessage","setGameoverMessage","comapreCards","setCompareCards","matchesCount","setMatchesCount","timer","setTimer","score","setScore","count","firstEmoji","setFirstEmoji","column","row","emoji","secondEmoji","setSecondEmoji","cardMap","setCardMap","currentMove","setCurrentMove","isMount","compareCards","compareCardEmoji","makeBoard","checkWin","emojiOne","emojiTwo","columnOne","rowOne","columnTwo","rowTwo","draft","matched","prevMatchesCount","decreaseTime","prev","shuffleArray","array","i","length","j","Math","floor","random","randomnArray","tempArray","tracker","tempInnerArray","tempObj","flipped","push","newGameClick","event","preventDefault","handleCardClick","map","columnMap","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,uBAAT,QAAwC,WAAxC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,kBAAP;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAMC,SAAS,GAAG,CAChB,IADgB,EAEhB,IAFgB,EAGhB,IAHgB,EAIhB,IAJgB,EAKhB,IALgB,EAMhB,IANgB,EAOhB,IAPgB,EAQhB,IARgB,EAShB,IATgB,EAUhB,IAVgB,EAWhB,IAXgB,EAYhB,IAZgB,EAahB,IAbgB,EAchB,IAdgB,EAehB,IAfgB,EAgBhB,IAhBgB,CAAlB;AAkBA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC;AAAEmB,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC;AAAEsB,IAAAA,MAAM,EAAE,CAAC,CAAX;AAAcC,IAAAA,GAAG,EAAE,CAAC,CAApB;AAAuBC,IAAAA,KAAK,EAAE;AAA9B,GAAD,CAA5C;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAAC;AAAEsB,IAAAA,MAAM,EAAE,CAAC,CAAX;AAAcC,IAAAA,GAAG,EAAE,CAAC,CAApB;AAAuBC,IAAAA,KAAK,EAAE;AAA9B,GAAD,CAA9C;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMkC,OAAO,GAAG9B,UAAU,EAA1B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiC,OAAJ,EAAa;AACX;AACD,KAFD,MAEO,IAAIC,YAAJ,EAAkB;AACvBC,MAAAA,gBAAgB,CAACb,UAAD,EAAaK,WAAb,CAAhB;AACD;AACF,GANQ,EAMN,CAACO,YAAD,CANM,CAAT;AAQAlC,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIApC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,YAAY,IAAI,CAApB,EAAuB;AACrBsB,MAAAA,QAAQ;AACT;AACF,GAJQ,EAIN,CAACtB,YAAD,CAJM,CAAT;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,KAAK,KAAK,CAAd,EAAiB;AACfoB,MAAAA,QAAQ;AACT;AACF,GAJQ,EAIP,CAACpB,KAAD,CAJO,CAAT,CAjDuB,CAsDvB;;AAEA,QAAMkB,gBAAgB,GAAG,CAACG,QAAD,EAAWC,QAAX,KAAwB;AAC/C,UAAM;AAAEf,MAAAA,MAAM,EAAEgB,SAAV;AAAqBf,MAAAA,GAAG,EAAEgB,MAA1B;AAAkCf,MAAAA,KAAK,EAAEJ;AAAzC,QAAwDgB,QAA9D;AACA,UAAM;AAAEd,MAAAA,MAAM,EAAEkB,SAAV;AAAqBjB,MAAAA,GAAG,EAAEkB,MAA1B;AAAkCjB,MAAAA,KAAK,EAAEC;AAAzC,QAAyDY,QAA/D;;AAEA,QAAIjB,UAAU,IAAIK,WAAlB,EAA+B;AAC7BG,MAAAA,UAAU,CAAEc,KAAD,IAAW;AACpBA,QAAAA,KAAK,CAACJ,SAAD,CAAL,CAAiBC,MAAjB,EAAyBI,OAAzB,GAAmC,IAAnC;AACAD,QAAAA,KAAK,CAACF,SAAD,CAAL,CAAiBC,MAAjB,EAAyBE,OAAzB,GAAmC,IAAnC;AACD,OAHS,CAAV;AAIA7B,MAAAA,eAAe,CAAE8B,gBAAD,IAAsBA,gBAAgB,GAAG,CAA1C,CAAf;AACAd,MAAAA,cAAc,CAAC,CAAD,CAAd;AACD,KAPD,MAOO;AACLA,MAAAA,cAAc,CAAC,CAAD,CAAd;AACAZ,MAAAA,QAAQ,CAAEwB,KAAD,IAAW;AAClBA,QAAAA,KAAK,CAACvB,KAAN;AACD,OAFO,CAAR;AAGD;AACF,GAjBD;;AAmBA,QAAMgB,QAAQ,GAAG,MAAM;AACrB,QAAIpB,KAAK,IAAI,CAAb,EAAgB;AACdL,MAAAA,kBAAkB,CAAC,iCAAD,CAAlB;AACAF,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAHD,MAGO;AACLE,MAAAA,kBAAkB,CAAC,iCAAD,CAAlB;AACAF,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GARD;;AAUA,QAAMqC,YAAY,GAAG,MAAM;AACzB7B,IAAAA,QAAQ,CAAE8B,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAR;AACD,GAFD;;AAIA,QAAMZ,SAAS,GAAG,MAAM;AACtB,UAAMa,YAAY,GAAIC,KAAD,IAAW;AAC9B,WAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,cAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,SAACD,KAAK,CAACC,CAAD,CAAN,EAAWD,KAAK,CAACG,CAAD,CAAhB,IAAuB,CAACH,KAAK,CAACG,CAAD,CAAN,EAAWH,KAAK,CAACC,CAAD,CAAhB,CAAvB;AACD;;AACD,aAAOD,KAAP;AACD,KAND;;AAQA,UAAMO,YAAY,GAAGR,YAAY,CAACzC,SAAD,CAAjC;AAEA,UAAMkD,SAAS,GAAG,EAAlB;AACA,QAAIC,OAAO,GAAG,CAAd;;AAEA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMS,cAAc,GAAG,EAAvB;;AACA,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAMQ,OAAO,GAAG,EAAhB;AACAA,QAAAA,OAAO,CAACnC,KAAR,GAAgB+B,YAAY,CAACE,OAAD,CAA5B;AACAE,QAAAA,OAAO,CAACC,OAAR,GAAkB,KAAlB;AACAD,QAAAA,OAAO,CAAChB,OAAR,GAAkB,KAAlB;AACAe,QAAAA,cAAc,CAACG,IAAf,CAAoBF,OAApB;AACAF,QAAAA,OAAO;AACR;;AAEDvC,MAAAA,QAAQ,CAAEwB,KAAD,IAAW;AAClBA,QAAAA,KAAK,CAACvB,KAAN,GAAc,CAAd;AACD,OAFO,CAAR;AAGAqC,MAAAA,SAAS,CAACK,IAAV,CAAeH,cAAf;AACD;;AACD9B,IAAAA,UAAU,CAAC4B,SAAD,CAAV;AACA1B,IAAAA,cAAc,CAAC,CAAD,CAAd;AACAhB,IAAAA,eAAe,CAAC,CAAD,CAAf;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAN,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAF,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GApCD;;AAsCA,QAAMsD,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA9B,IAAAA,SAAS;AACV,GAHD;;AAKA,QAAM+B,eAAe,GAAG,CAAC1C,GAAD,EAAMD,MAAN,KAAiB;AACvC,YAAQO,WAAR;AACE,WAAK,CAAL;AACE;AACED,UAAAA,UAAU,CAAEc,KAAD,IAAW;AACpBA,YAAAA,KAAK,CAACpB,MAAD,CAAL,CAAcC,GAAd,EAAmBqC,OAAnB,GAA6B,CAAClB,KAAK,CAACpB,MAAD,CAAL,CAAcC,GAAd,EAAmBqC,OAAjD;AACD,WAFS,CAAV;AAGAvC,UAAAA,aAAa,CAAEqB,KAAD,IAAW;AACvBA,YAAAA,KAAK,CAAClB,KAAN,GAAcG,OAAO,CAACL,MAAD,CAAP,CAAgBC,GAAhB,EAAqBC,KAAnC;AACAkB,YAAAA,KAAK,CAACpB,MAAN,GAAeA,MAAf;AACAoB,YAAAA,KAAK,CAACnB,GAAN,GAAYA,GAAZ;AACD,WAJY,CAAb;AAKAO,UAAAA,cAAc,CAAC,CAAD,CAAd;AACD;AACD;;AAEF,WAAK,CAAL;AACE;AACEF,UAAAA,UAAU,CAAEc,KAAD,IAAW;AACpBA,YAAAA,KAAK,CAACpB,MAAD,CAAL,CAAcC,GAAd,EAAmBqC,OAAnB,GAA6B,CAAClB,KAAK,CAACpB,MAAD,CAAL,CAAcC,GAAd,EAAmBqC,OAAjD;AACD,WAFS,CAAV;AAGAlC,UAAAA,cAAc,CAAEgB,KAAD,IAAW;AACxBA,YAAAA,KAAK,CAAClB,KAAN,GAAcG,OAAO,CAACL,MAAD,CAAP,CAAgBC,GAAhB,EAAqBC,KAAnC;AACAkB,YAAAA,KAAK,CAACpB,MAAN,GAAeA,MAAf;AACAoB,YAAAA,KAAK,CAACnB,GAAN,GAAYA,GAAZ;AACD,WAJa,CAAd;AAKAX,UAAAA,eAAe,CAAC,IAAD,CAAf;AAED;AACD;;AAEF,WAAK,CAAL;AACE;AACEgB,UAAAA,UAAU,CAAEc,KAAD,IAAW;AACpBA,YAAAA,KAAK,CAACtB,UAAU,CAACE,MAAZ,CAAL,CAAyBF,UAAU,CAACG,GAApC,EAAyCqC,OAAzC,GAAmD,KAAnD;AACAlB,YAAAA,KAAK,CAACjB,WAAW,CAACH,MAAb,CAAL,CAA0BG,WAAW,CAACF,GAAtC,EAA2CqC,OAA3C,GAAqD,KAArD;AACD,WAHS,CAAV;AAIA9B,UAAAA,cAAc,CAAC,CAAD,CAAd;AACD;AACD;;AAEA,WAAK,CAAL;AACE,SAEC;AA3CP;AA6CD,GA9CD;;AAgDA,sBACE;AAAA,4BACE;AAAA,4BAAYb,KAAK,CAACE,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEJ,KAAlB;AAAyB,MAAA,YAAY,EAAE8B;AAAvC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,KAAK,EAAC,iBAAX;AAAA,gBACGlB,OAAO,CAACuC,GAAR,CAAY,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACjC,4BACE,QAAC,OAAD;AACE,UAAA,eAAe,EAAEH,eADnB;AAGE,UAAA,SAAS,EAAEE,SAHb;AAIE,UAAA,MAAM,EAAEC;AAJV,WAEO,aAAaA,KAFpB;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATA;AADH;AAAA;AAAA;AAAA;AAAA,YAHF,EAeG7D,QAAQ,iBACP;AAAA,8BACE;AAAA,kBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBAhBJ,EAqBGoB,WAAW,KAAK,CAAhB,gBACC;AAAI,MAAA,OAAO,EAAEoC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IAvBN,eAwBE;AAAQ,MAAA,OAAO,EAAEH,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA,kBADF;AA4BD,CAhND;;GAAMzD,U;UAwBsBL,Q,EACUA,Q,EACEA,Q,EACRA,Q,EAEdC,U;;;KA7BZI,U;AAkNN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { useIsMount } from \"./hooks/useIsMount\";\nimport { unstable_batchedUpdates } from \"react-dom\";\nimport Countdown from \"./Countdown\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\n\nconst MemoryGame = () => {\n  const emojiList = [\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n  ];\n  const [gameover, setGameover] = useState(false);\n  const [gameoverMessage, setGameoverMessage] = useState(\"\");\n  const [comapreCards, setCompareCards] = useState(false)\n  const [matchesCount, setMatchesCount] = useState(0);\n  const [timer, setTimer] = useState(60);\n  const [score, setScore] = useImmer({ count: 0 });\n  const [firstEmoji, setFirstEmoji] = useImmer({ column: -1, row: -1, emoji: \"\" });\n  const [secondEmoji, setSecondEmoji] = useImmer({ column: -1, row: -1, emoji: \"\" });\n  const [cardMap, setCardMap] = useImmer([]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const isMount = useIsMount();\n\n  useEffect(() => {\n    if (isMount) {\n      return;\n    } else if (compareCards) {\n      compareCardEmoji(firstEmoji, secondEmoji);\n    }\n  }, [compareCards]);\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n\n  useEffect(() => {\n    if (matchesCount == 8) {\n      checkWin();\n    }\n  }, [matchesCount]);\n\n  useEffect(() => {\n    if (timer === 0) {\n      checkWin();\n    }\n  },[timer]);\n  // 0 = no Cards currently clicked, 1 = 1 Card currently clicked, 2 = 2 Cards currently clicked (cannot go higher than 2)\n\n  const compareCardEmoji = (emojiOne, emojiTwo) => {\n    const { column: columnOne, row: rowOne, emoji: firstEmoji } = emojiOne;\n    const { column: columnTwo, row: rowTwo, emoji: secondEmoji } = emojiTwo;\n\n    if (firstEmoji == secondEmoji) {\n      setCardMap((draft) => {\n        draft[columnOne][rowOne].matched = true;\n        draft[columnTwo][rowTwo].matched = true;\n      });\n      setMatchesCount((prevMatchesCount) => prevMatchesCount + 1);\n      setCurrentMove(0);\n    } else {\n      setCurrentMove(2);\n      setScore((draft) => {\n        draft.count++;\n      });\n    }\n  };\n\n  const checkWin = () => {\n    if (timer <= 0) {\n      setGameoverMessage(\"You ran out of time YOU LOSE!!!\");\n      setGameover(true);\n    } else {\n      setGameoverMessage(\"You finished in time YOU WIN!!!\");\n      setGameover(true);\n    }\n  }\n\n  const decreaseTime = () => {\n    setTimer((prev) => prev - 1);\n  };\n\n  const makeBoard = () => {\n    const shuffleArray = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n\n    const tempArray = [];\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      const tempInnerArray = [];\n      for (let j = 0; j < 4; j++) {\n        const tempObj = {};\n        tempObj.emoji = randomnArray[tracker];\n        tempObj.flipped = false;\n        tempObj.matched = false;\n        tempInnerArray.push(tempObj);\n        tracker++;\n      }\n\n      setScore((draft) => {\n        draft.count = 0;\n      });\n      tempArray.push(tempInnerArray);\n    }\n    setCardMap(tempArray);\n    setCurrentMove(0);\n    setMatchesCount(0);\n    setTimer(60);\n    setGameoverMessage(\"\");\n    setGameover(false);\n  };\n\n  const newGameClick = (event) => {\n    event.preventDefault();\n    makeBoard();\n  };\n\n  const handleCardClick = (row, column) => {\n    switch (currentMove) {\n      case 0:\n        {\n          setCardMap((draft) => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setFirstEmoji((draft) => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCurrentMove(1);\n        }\n        break;\n\n      case 1:\n        {\n          setCardMap((draft) => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setSecondEmoji((draft) => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCompareCards(true)\n\n        }\n        break;\n\n      case 2:\n        {\n          setCardMap((draft) => {\n            draft[firstEmoji.column][firstEmoji.row].flipped = false;\n            draft[secondEmoji.column][secondEmoji.row].flipped = false;\n          });\n          setCurrentMove(0);\n        }\n        break;\n\n        case 3:\n          {\n\n          }\n    }\n  };\n\n  return (\n    <>\n      <h1>Score: {score.count}</h1>\n      <Countdown timer={timer} decreaseTime={decreaseTime}/>\n      <div class=\"memoryContainer\">\n        {cardMap.map((columnMap, index) => {\n          return (\n            <CardRow\n              handleCardClick={handleCardClick}\n              key={\"card_row\" + index}\n              columnMap={columnMap}\n              column={index}\n            />\n          );\n        })}\n      </div>\n      {gameover && (\n        <>\n          <h1>{gameoverMessage}</h1>\n          <p>Press newgame button to start a new game</p>\n        </>\n      )}\n      {currentMove === 2 ? (\n        <h1 onClick={handleCardClick}>No Match! click mouse to try again</h1>\n      ) : null}\n      <button onClick={newGameClick}>New Game</button>\n    </>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}
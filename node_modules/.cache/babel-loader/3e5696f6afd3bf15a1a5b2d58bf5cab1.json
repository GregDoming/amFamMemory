{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useState();\n  const [secondEmoji, setSecondEmoji] = useState();\n  const [emojiMap, setEmojiMap] = useState(intialEmojiState);\n  const [flippedMap, setFlippedMap] = useState(initialBoolState);\n  const [matchedMap, setMatchedMap] = useState(initialBoolState);\n  const initialBoolState = [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]];\n  const intialEmojiState = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"]];\n  const emojiList = [\"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\", \"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\"];\n\n  const compareCardEmoji = () => {};\n\n  const makeBoard = () => {\n    const shuffleArray = array => {\n      const clonedArray = [...array];\n\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [clonedArray[i], clonedArray[j]] = [clonedArray[j], clonedArray[i]];\n      }\n\n      return clonedArray;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const tempEmojiArr = [...emojiMap];\n        tempEmojiArr[i][j] = randomnArray[tracker];\n        setEmojiMap(tempEmojiArr);\n        tracker++;\n      }\n    }\n  };\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n\n  const newGameClick = event => {\n    event.preventDefault();\n    makeBoard();\n    setMatchedMap(initialBoolState);\n    setFlippedMap(initialBoolState);\n    console.log(initialBoolState);\n  };\n\n  const handleCardClick = (row, column) => {\n    // event.preventDefault();\n    const tempFlippedMap = [...flippedMap];\n    tempFlippedMap[column][row] = !tempFlippedMap[column][row];\n    setFlippedMap(tempFlippedMap);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"memoryContainer\",\n      children: emojiMap.map((currentColumn, index) => {\n        return /*#__PURE__*/_jsxDEV(CardRow, {\n          handleCardClick: handleCardClick,\n          rowEmojis: currentColumn,\n          rowFlipped: flippedMap[index],\n          rowMatched: matchedMap[index],\n          column: index\n        }, \"card_row\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newGameClick,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MemoryGame, \"TQ++EdRa7Vp+MxEAKpIYlEg6HU4=\");\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js"],"names":["React","useState","useEffect","CardRow","MemoryGame","gameover","setGameover","firstEmoji","setFirstEmoji","secondEmoji","setSecondEmoji","emojiMap","setEmojiMap","intialEmojiState","flippedMap","setFlippedMap","initialBoolState","matchedMap","setMatchedMap","emojiList","compareCardEmoji","makeBoard","shuffleArray","array","clonedArray","i","length","j","Math","floor","random","randomnArray","tracker","tempEmojiArr","newGameClick","event","preventDefault","console","log","handleCardClick","row","column","tempFlippedMap","map","currentColumn","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\n\n\nconst MemoryGame = () => {\n  const [gameover, setGameover] = useState(false);\n  const [firstEmoji, setFirstEmoji] = useState();\n  const [secondEmoji, setSecondEmoji] = useState();\n  const [emojiMap, setEmojiMap] = useState(intialEmojiState);\n  const [flippedMap, setFlippedMap] = useState(initialBoolState);\n  const [matchedMap, setMatchedMap] = useState(initialBoolState);\n\n  const initialBoolState = [\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n  ];\n  \n  const intialEmojiState = [\n    [\"\", \"\", \"\", \"\"],\n    [\"\", \"\", \"\", \"\"],\n    [\"\", \"\", \"\", \"\"],\n    [\"\", \"\", \"\", \"\"],\n  ];\n\n  const emojiList = [\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n  ];\n\n  const compareCardEmoji = () => {};\n\n  const makeBoard = () => {\n    const shuffleArray = (array) => {\n      const clonedArray = [...array];\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [clonedArray[i], clonedArray[j]] = [clonedArray[j], clonedArray[i]];\n      }\n      return clonedArray;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const tempEmojiArr = [...emojiMap];\n        tempEmojiArr[i][j] = randomnArray[tracker];\n        setEmojiMap(tempEmojiArr);\n        tracker++;\n      }\n    }\n  };\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n\n  const newGameClick = event => {\n    event.preventDefault();\n    makeBoard();\n    setMatchedMap(initialBoolState);\n    setFlippedMap(initialBoolState);\n    console.log(initialBoolState)\n\n  }\n\n  const handleCardClick = (row, column) => {\n    // event.preventDefault();\n    const tempFlippedMap = [...flippedMap]\n    tempFlippedMap[column][row] = !tempFlippedMap[column][row]\n    setFlippedMap(tempFlippedMap);\n  }\n\n  return (\n    <>\n      <div class=\"memoryContainer\">\n        {emojiMap.map((currentColumn, index) => {\n          return <CardRow handleCardClick={handleCardClick} key={\"card_row\" + index} rowEmojis={currentColumn} rowFlipped={flippedMap[index]} rowMatched={matchedMap[index]} column={index} />;\n        })}\n      </div>\n      <button onClick={newGameClick}>New Game</button>\n    </>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}
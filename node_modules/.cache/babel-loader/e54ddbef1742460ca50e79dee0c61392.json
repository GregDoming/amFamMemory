{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { useIsMount } from \"./hooks/useIsMount\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const emojiList = [\"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\", \"ðŸ˜€\", \"ðŸ˜‚\", \"ðŸ¥°\", \"ðŸ˜˜\", \"ðŸ¤ª\", \"ðŸ¤“\", \"ðŸ¤©\", \"ðŸ¥³\"];\n  const [gameover, setGameover] = useState(false);\n  const [matchesCount, setMatchesCount] = useState(0);\n  const [score, setScore] = useImmer({\n    count: 0\n  });\n  const [firstEmoji, setFirstEmoji] = useImmer({\n    column: -1,\n    row: -1,\n    emoji: \"\"\n  });\n  const [secondEmoji, setSecondEmoji] = useImmer({\n    column: -1,\n    row: -1,\n    emoji: \"\"\n  });\n  const [cardMap, setCardMap] = useImmer([]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (isMount) {\n      return;\n    } else {\n      compareCardEmoji(firstEmoji, secondEmoji);\n    }\n  }, [secondEmoji]);\n  useEffect(() => {\n    makeBoard();\n  }, []);\n  useEffect(() => {\n    const stateNameArray = ['matchesCount', 'score', 'firstEmoji', 'secondEmoji', 'cardMap', 'currentMove'];\n    stateNameArray;\n    localStorage.setItem('cardMap', JSON.stringify(cardMap));\n  });\n  useEffect(() => {\n    const stateNameArray = ['matchesCount', 'score', 'firstEmoji', 'secondEmoji', 'cardMap', 'currentMove'];\n    const data = localStorage.getItem('cardMap');\n\n    if (data) {\n      console.log(data);\n    }\n  }, []);\n  useEffect(() => {\n    if (matchesCount == 8) {\n      setGameover(true);\n    }\n  }, [matchesCount]); // 0 = no Cards currently clicked, 1 = 1 Card currently clicked, 2 = 2 Cards currently clicked (cannot go higher than 2)\n\n  const compareCardEmoji = (emojiOne, emojiTwo) => {\n    const {\n      column: columnOne,\n      row: rowOne,\n      emoji: firstEmoji\n    } = emojiOne;\n    const {\n      column: columnTwo,\n      row: rowTwo,\n      emoji: secondEmoji\n    } = emojiTwo;\n\n    if (firstEmoji == secondEmoji) {\n      setCardMap(draft => {\n        draft[columnOne][rowOne].matched = true;\n        draft[columnTwo][rowTwo].matched = true;\n      });\n      setMatchesCount(prevMatchesCount => prevMatchesCount + 1);\n      setCurrentMove(0);\n    } else {\n      setCurrentMove(2);\n      setScore(draft => {\n        draft.count++;\n      });\n    }\n  };\n\n  const makeBoard = () => {\n    const shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n\n      return array;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n    const tempArray = [];\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      const tempInnerArray = [];\n\n      for (let j = 0; j < 4; j++) {\n        const tempObj = {};\n        tempObj.emoji = randomnArray[tracker];\n        tempObj.flipped = false;\n        tempObj.matched = false;\n        tempInnerArray.push(tempObj);\n        tracker++;\n      }\n\n      setScore(draft => {\n        draft.count = 0;\n      });\n      tempArray.push(tempInnerArray);\n    }\n\n    setCardMap(tempArray);\n    setCurrentMove(0);\n    setMatchesCount(0);\n  };\n\n  const newGameClick = event => {\n    event.preventDefault();\n    makeBoard();\n  };\n\n  const handleCardClick = (row, column) => {\n    switch (currentMove) {\n      case 0:\n        {\n          setCardMap(draft => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setFirstEmoji(draft => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCurrentMove(1);\n        }\n        break;\n\n      case 1:\n        {\n          setCardMap(draft => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setSecondEmoji(draft => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n        }\n        break;\n\n      case 2:\n        {\n          setCardMap(draft => {\n            draft[firstEmoji.column][firstEmoji.row].flipped = false;\n            draft[secondEmoji.column][secondEmoji.row].flipped = false;\n          });\n          setCurrentMove(0);\n        }\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Score: \", score.count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"memoryContainer\",\n      children: cardMap.map((columnMap, index) => {\n        return /*#__PURE__*/_jsxDEV(CardRow, {\n          handleCardClick: handleCardClick,\n          columnMap: columnMap,\n          column: index\n        }, \"card_row\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), gameover && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You Win!!!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Press newgame button to start a new game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), currentMove === 2 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: handleCardClick,\n      children: \"No Match! click mouse to try again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newGameClick,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MemoryGame, \"qf9zXH7BLBEtyrFM/siEHvgIioI=\", false, function () {\n  return [useImmer, useImmer, useImmer, useImmer, useIsMount];\n});\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/home/gregory/Desktop/greggit/amfam/src/MemoryGame.js"],"names":["React","useState","useEffect","useRef","useImmer","useIsMount","CardRow","MemoryGame","emojiList","gameover","setGameover","matchesCount","setMatchesCount","score","setScore","count","firstEmoji","setFirstEmoji","column","row","emoji","secondEmoji","setSecondEmoji","cardMap","setCardMap","currentMove","setCurrentMove","isMount","compareCardEmoji","makeBoard","stateNameArray","localStorage","setItem","JSON","stringify","data","getItem","console","log","emojiOne","emojiTwo","columnOne","rowOne","columnTwo","rowTwo","draft","matched","prevMatchesCount","shuffleArray","array","i","length","j","Math","floor","random","randomnArray","tempArray","tracker","tempInnerArray","tempObj","flipped","push","newGameClick","event","preventDefault","handleCardClick","map","columnMap","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { useIsMount } from \"./hooks/useIsMount\";\nimport CardRow from \"./CardRow\";\nimport \"./MemoryGame.css\";\n\nconst MemoryGame = () => {\n  const emojiList = [\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n    \"ðŸ˜€\",\n    \"ðŸ˜‚\",\n    \"ðŸ¥°\",\n    \"ðŸ˜˜\",\n    \"ðŸ¤ª\",\n    \"ðŸ¤“\",\n    \"ðŸ¤©\",\n    \"ðŸ¥³\",\n  ];\n  const [gameover, setGameover] = useState(false)\n  const [matchesCount, setMatchesCount] = useState(0);\n  const [score, setScore] = useImmer({ count: 0 });\n  const [firstEmoji, setFirstEmoji] = useImmer({ column: -1, row: -1, emoji: \"\" });\n  const [secondEmoji, setSecondEmoji] = useImmer({ column: -1, row: -1, emoji: \"\" });\n  const [cardMap, setCardMap] = useImmer([]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const isMount = useIsMount();\n\n  useEffect(() => {\n    if (isMount) {\n      return;\n    } else {\n      compareCardEmoji(firstEmoji, secondEmoji);\n    }\n  }, [secondEmoji]);\n\n  useEffect(() => {\n    makeBoard();\n  }, []);\n  \n  useEffect(() => {\n    const stateNameArray = ['matchesCount', 'score', 'firstEmoji', 'secondEmoji', 'cardMap', 'currentMove']\n    stateNameArray\n\n    localStorage.setItem('cardMap', JSON.stringify(cardMap))\n  })\n\n  useEffect(() => {\n    const stateNameArray = ['matchesCount', 'score', 'firstEmoji', 'secondEmoji', 'cardMap', 'currentMove']\n    const data = localStorage.getItem('cardMap')\n\n    if (data) {\n      console.log(data)\n    }\n    \n  }, [])\n\n  useEffect(() => {\n    if (matchesCount == 8) {\n      setGameover(true);\n    }\n  }, [matchesCount])\n  // 0 = no Cards currently clicked, 1 = 1 Card currently clicked, 2 = 2 Cards currently clicked (cannot go higher than 2)\n\n  const compareCardEmoji = (emojiOne, emojiTwo) => {\n    const { column: columnOne, row: rowOne, emoji: firstEmoji } = emojiOne;\n    const { column: columnTwo, row: rowTwo, emoji: secondEmoji } = emojiTwo;\n\n    if (firstEmoji == secondEmoji) {\n      setCardMap((draft) => {\n        draft[columnOne][rowOne].matched = true;\n        draft[columnTwo][rowTwo].matched = true;\n      });\n      setMatchesCount(prevMatchesCount => prevMatchesCount + 1);\n      setCurrentMove(0);\n    } else {\n      setCurrentMove(2);\n      setScore((draft) => {\n        draft.count++;\n      });\n    }\n  };\n\n  const makeBoard = () => {\n    const shuffleArray = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    };\n\n    const randomnArray = shuffleArray(emojiList);\n\n    const tempArray = [];\n    let tracker = 0;\n\n    for (let i = 0; i < 4; i++) {\n      const tempInnerArray = [];\n      for (let j = 0; j < 4; j++) {\n        const tempObj = {};\n        tempObj.emoji = randomnArray[tracker];\n        tempObj.flipped = false;\n        tempObj.matched = false;\n        tempInnerArray.push(tempObj);\n        tracker++;\n      }\n\n      setScore((draft) => {\n        draft.count = 0;\n      });\n      tempArray.push(tempInnerArray);\n    }\n    setCardMap(tempArray);\n    setCurrentMove(0);\n    setMatchesCount(0);\n  };\n\n\n\n  const newGameClick = (event) => {\n    event.preventDefault();\n    makeBoard();\n  };\n\n  const handleCardClick = (row, column) => {\n    switch (currentMove) {\n      case 0:\n        {\n          setCardMap((draft) => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setFirstEmoji((draft) => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n          setCurrentMove(1);\n        }\n        break;\n\n      case 1:\n        {\n          setCardMap((draft) => {\n            draft[column][row].flipped = !draft[column][row].flipped;\n          });\n          setSecondEmoji((draft) => {\n            draft.emoji = cardMap[column][row].emoji;\n            draft.column = column;\n            draft.row = row;\n          });\n        }\n        break;\n\n      case 2:\n        {\n          setCardMap((draft) => {\n            draft[firstEmoji.column][firstEmoji.row].flipped = false;\n            draft[secondEmoji.column][secondEmoji.row].flipped = false;\n          });\n          setCurrentMove(0);\n        }\n        break;\n    }\n  };\n\n  return (\n    <>\n      <h1>Score: {score.count}</h1>\n      <div class=\"memoryContainer\">\n        {cardMap.map((columnMap, index) => {\n          return (\n            <CardRow\n              handleCardClick={handleCardClick}\n              key={\"card_row\" + index}\n              columnMap={columnMap}\n              column={index}\n            />\n          );\n        })}\n      </div>\n      {gameover && (\n        <>\n        <h1>You Win!!!!!</h1>\n        <p>Press newgame button to start a new game</p>\n        </>\n      )}\n      {currentMove === 2 ? (\n        <h1 onClick={handleCardClick}>No Match! click mouse to try again</h1>\n      ) : null}\n      <button onClick={newGameClick}>New Game</button>\n    </>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}